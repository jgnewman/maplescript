
-- Create a copy-able base we can use so we don't have to redefine this
-- object all over the place.
(make PATCH_RECORD { :additions [] :removals [] :updates [] })

---
@private isRemoval

Determines whether a patch object created by virtual-dom indicates
a node will be removed from the dom.
---
(make (isRemoval patch)
  (all
    (= patch.patch undefined)
    (= patch.type 7)))

---
@private isAddition

Determines whether a patch object created by virtual-dom indicates
a node will be added to the dom
---
(make (isAddition patch)
  (all
    (= :vnode (m:typeof patch.patch))
    (= patch.type 6)
    (= patch.vNode null)))

---
@private isUpdate

Determines whether a patch object created by virtual-dom is
being updated in any way.
---
(make (isUpdate patch)
  (= :number (m:typeof patch.type)))

---
@private collectChildHooks

Loops over an array of objects where each contains :removals and :additions.
Flattens this array into a single object with the same properties.
---
(make

  (collectChildHooks childPatches)
    (collectChildHooks childPatches (m:copy PATCH_RECORD))

  (collectChildHooks [] accum)
    accum

  (collectChildHooks [first|rest] accum)
    (collectChildHooks rest { :removals  (accum:removals.concat first:removals)
                              :additions (accum:additions.concat first:additions)
                              :updates   (accum:updates.concat first:updates) }))

---
@private getChildHooks

A function for looping over child nodes and returning their hook-ready nodes.
---
(make (getChildHooks patch)
  (if

    -- When there are child patches, flatten their hooks and return them
    patch.patch?.children
      (do (make children (Array.prototype.slice.call patch.patch.children))
          (make childPatches (children.map (@ [child] (flattenHooks child))))
          (collectChildHooks childPatches))

    -- When there are no child patches, return empty lists
    :else
      (m:copy PATCH_RECORD)))

---
@private flattenHooks

Takes an array of patch objects where each might have nested children.
Recursively iterates over this array and all existing children, and produces
a single object containing two flattened arrays. These arrays contain all of
the patches with hooks for aftermount hooks and beforeunmount hooks.
---

(make

  -- Called with just the patches, recurse with object keys and accumulators
  (flattenHooks patches)
    (flattenHooks patches (m:keys patches) [] [] [])

  -- Called with an empty list of object keys, return the accumulators
  (flattenHooks patches [] removals additions updates)
    { :removals removals :additions additions :updates updates }

  -- Called with everything, recurse and accumulate
  (flattenHooks patches [first|rest] removals additions updates)
    (do

      -- Reference the patch in question and recursively handle its children
      (make patch (m:get patches first))
      (make childHooks (getChildHooks patch))
      (make patchArray (if (= :array (m:typeof patch)) patch :else [patch]))

      (make accumRecord { :removals (removals.concat childHooks:removals)
                          :additions (additions.concat childHooks:additions)
                          :updates (updates.concat childHooks:updates) })

      (patchArray.forEach
        (@ [p]
          (if

            -- For removals, concat this patch with the list of child removals
            (isRemoval p)
              (m:dangerouslyMutate :removals (accumRecord:removals.concat p) accumRecord)

            -- For additions, concat this patch with the list of child additions
            (isAddition p)
              (m:dangerouslyMutate :additions (accumRecord:additions.concat p) accumRecord)

            -- For other updates, concat this patch with the list of child updates
            (isUpdate p)
              (m:dangerouslyMutate :updates (accumRecord:updates.concat p) accumRecord))))

      (flattenHooks patches
                    rest
                    accumRecord:removals
                    accumRecord:additions
                    accumRecord:updates)))

---
@public applyPatches

Compares two virtual trees, finds differences, and then applies those
differences to a tree of real nodes. Before applying patches, runs
any existing beforeunmount hooks. After applying patches, runs any existing
aftermount hooks.

@param {VNode}   prevTree  The virtual dom as existing prior to updating.
@param {VNode}   nextTree  The virtual dom we want to move to.
@param {Element} nodes     The actual dom nodes to be updated.
---
(make (applyPatches prevTree nextTree nodes)
  (do (make changes (m:vdom:diff prevTree nextTree))

      -- Un-nest the patches
      (make hooks (flattenHooks changes))

      -- For everything that looks like a removal, call before-unmount
      (hooks:removals.forEach
        (@ [patch]
          (if patch.vNode?:lifecycle?:before-unmount
            (patch.vNode:lifecycle:before-unmount))))

      -- For everything that looks like an update, call before-update
      (hooks:updates.forEach
        (@ [patch]
          (if patch.vNode?:lifecycle?:before-update
            (patch.vNode:lifecycle:before-update))))

      -- Apply the changes
      (m:vdom:patchNodes nodes changes)

      -- For everything that looks like an addition, call after-mount
      (hooks:additions.forEach
        (@ [patch]
          (if patch.patch?:lifecycle?:after-mount
            (patch.patch:lifecycle:after-mount))))

      -- For everything that looks like an update, call after-update
      (hooks:updates.forEach
        (@ [patch]
          (if patch.vNode?:lifecycle?:after-update
            (patch.vNode:lifecycle:after-update))))

      -- Return the new vdom and real nodes
      { :newdom nextTree :nodes nodes }))


---
@public runInitialHooks

When mounting the virtual dom into the real dom for the first time,
recursively iterates through the virtual dom and calls all aftermount
hooks.
---
(make (runInitialHooks vtree)
  (do

    -- recurse for children
    (if vtree.children
      (do (make children (Array.prototype.slice.call vtree.children))
          (children.forEach (@ [child] (runInitialHooks child)))))

    -- call aftermount if we have it
    (if vtree:lifecycle?:after-mount
      (vtree:lifecycle:after-mount))))


---
Export functions for running initial hooks upon render and for
applying patches to the dom after re-rendering a vnode tree.
---
(export [runInitialHooks applyPatches])
