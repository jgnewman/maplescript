(import './lib/lifecycle' [:runInitialHooks :applyPatches])
(import './lib/state' [:state])

(make treeTracker { :prev null })

(make subscribeToState [stateFn treeBuilder initialTree nodes]
  (m:dangerouslyMutate :prev initialTree treeTracker)
  (stateFn null (fn [newStateFn]
    (make nextTree (treeBuilder (newStateFn)))
    (applyPatches treeTracker:prev nextTree nodes)
    (m:dangerouslyMutate :prev nextTree treeTracker))))

(make render [treeBuilder stateFn target]

  # Pass state values into the tree and render it
  (make vrender (treeBuilder (stateFn)))
  (make nodes (m:vdom:render vrender))

  # Drop nodes into the dom
  (m:vdom:injectNodes nodes target)

  # Subscribe to state changes so we can auto-re-render
  # when the state changes
  (subscribeToState stateFn treeBuilder vrender nodes)

  # Run our initial hooks
  (runInitialHooks vrender stateFn))


# Attach a lifecycle to the vnodes returned by an element
# We have to use dangerouslyMutate only because vdom is dependency tech
(make component [elem]
  (fn [attrs children]
    (make inst (elem attrs children))
    (m:dangerouslyMutate :lifecycle {} inst)
    inst))

(make afterMount [comp fun]
  (fn [attrs children]
    (make inst (comp attrs children))
    (make hook (fn [] (fun attrs)))
    (m:dangerouslyMutate :aftermount hook inst:lifecycle)
    inst))

(make beforeUnmount [comp fun]
  (fn [attrs children]
    (make inst (comp attrs children))
    (make hook (fn [] (fun attrs)))
    (m:dangerouslyMutate :beforeunmount fun inst:lifecycle)
    inst))

(export [
  state
  render
  component
  afterMount
  beforeUnmount
])
