---
Syrup.maple: ~8.7kb minified & browserified

A framework utilizing MapleScript and its virtual-dom capabilities to
provide a somewhat React.js-like experience.
---

(import './lib/lifecycle' [:runInitialHooks :applyPatches])
(import './lib/state' [:state :reduce])

---
@public render

Injects a virtual tree into the actual dom and associates it with
a state object such that when the state changes, the tree is
re-rendered, diffed, and patched.

@param {Function}    treeBuilder  A function returning the entire virtual tree.
@param {Object}      state        A state object as returned by `(state)`.
@param {String|Node} target       Represents a dom node in which to render the tree.
---
(make (render treeBuilder state target)

  -- Create initial dom tracker and grab initial state values
  (do (make dom { :current-tree null :current-nodes null })
      (make initialState (state:get))

      -- Set our initial vnode tree and real node tree on our dom tracker
      (m:dangerouslyMutate :current-tree (treeBuilder { :state initialState }) dom)
      (m:dangerouslyMutate :current-nodes (m:vdom:render dom:current-tree) dom)

      -- Inject nodes into the dom
      (m:vdom:injectNodes dom:current-nodes target)

      -- Set up a subscription to the state that diffs and patches the dom
      (state:sub
        (@ [newState] (make newTree (treeBuilder { :state newState }))
                      (applyPatches dom:current-tree newTree dom:current-nodes)
                      (m:dangerouslyMutate :current-tree newTree dom)))

      -- Since this is the first render, run aftermount hooks
      (runInitialHooks dom:current-tree initialState)))

---
@private metaComponent

Wraps a component in a meta component that attaches a lifecycle listener

@param {event}    Symbol  The lifecycle event to watch
@param {Function} comp    A function that produces a vnode tree.
@param {Function} fun     A hook to run after mount. Called with attributes.
---
(make (metaComponent event comp fun)
  (@ [attrs children]
    (make inst (comp attrs children))
    (make hook (@ (fun attrs)))
    (if
      inst
        (do (m:dangerouslyMutate :lifecycle (any inst:lifecycle {}) inst)
            (m:dangerouslyMutate event hook inst:lifecycle)
            inst)
      :else
        inst)))

---
@public afterMount

Takes a component function and a hook function; returns a new component
function that executes the hook after being mounted into the actual dom.

@param {Function} comp  A function that produces a vnode tree.
@param {Function} fun   A hook to run after mount. Called with attributes.
---
(make (afterMount comp fun)
  (metaComponent :after-mount comp fun))

---
@public beforeUnmount

Takes a component function and a hook function; returns a new component
function that executes the hook before being removed from the actual dom.

@param {Function} comp  A function that produces a vnode tree.
@param {Function} fun   A hook to run before ummount. Called with attributes.
---
(make (beforeUnmount comp fun)
  (metaComponent :before-unmount comp fun))

---
@public beforeUpdate

Takes a component function and a hook function; returns a new component
function that executes the hook before the node is updated.

@param {Function} comp  A function that produces a vnode tree.
@param {Function} fun   A hook to run before update. Called with attributes.
---
(make (beforeUpdate comp fun)
  (metaComponent :before-update comp fun))

---
@public beforeUpdate

Takes a component function and a hook function; returns a new component
function that executes the hook after the node is updated.

@param {Function} comp  A function that produces a vnode tree.
@param {Function} fun   A hook to run after update. Called with attributes.
---
(make (afterUpdate comp fun)
  (metaComponent :after-update comp fun))

---
Export all of our public functions.
---
(export [
  state
  reduce
  render
  afterMount
  beforeUnmount
  afterUpdate
  beforeUpdate
])
