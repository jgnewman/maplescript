---
&
&foo
&.foo
&:foo

-- map xs with a function of x returning x + 4
(m:map xs (@ [x] (+ x 4)))

-- map xs with a function returning 2 + 4
(m:map xs (@ (+ 2 4)))

-- create a promise then handle with functions of r
(-> (genPromise)
    (&.then (@ [r] (genPromise r)))
    (&.then (@ [r] (genPromise r))))

-- create a promise then handle with functions without args
(-> (genPromise)
    (&.then (@ (genPromise)))
    (&.then (@ (genPromise))))

-- a named, non-polymorphic function
(make (add x y) (+ x y))

(make (add x y)
  (do (m:log 'need a do block for multi actions')
      (+ x y)))

-- pattern matching factorial function
-- works with single pattern or multi pattern
(make
  (factorial 0)
    (do 1)
  (factorial n)
    (do (* n (factorial (- n 1)))))

-- pattern matching with qualifier
(make (factorial n (where (?< n 2)))
        (do 1)
      (factorial n)
        (do (* n (factorial (- n 1)))))

-- anonymous function assignment to variable
(make factorial (@ [n] (if (?< n 2) 1
                           (* n (factorial (- n 1))))))

-- async function
(make foo (@async :err [x y] (await (+ x y))))

---

(make (add x y)
  (do (m:log 'need a do block for multi actions')
      (+ x y)))

---

-- pattern matching with qualifier
(make (factorial n (where (?< n 2)))
        (do 1)
      (factorial n)
        (do (* n (factorial (- n 1)))))

true
null
undefined
12
0xffee
12e4
1234512

foo:bar-baz

`foo ${(and stuff)} bar`

<br/>

<Title {:class 'foo' :text 'bar'} />

foo

foo:bar.baz.0.qux

foo:bar?.baz?.0.qux?

&foo

&.foo

&:foo


(make x 4)
(make y 6)

<div {:fart "shart"}></div>

{:foo (@ (bar baz))}

(make (render props)
  <div { :class "foo bar" }>
    "This is my new DOM element"
  </div>
)

-- Will always export an object. Just a matter of
-- how you want that object put together.
(export [foo/2 bar baz])
(export foo/2)
(export {:foo foo/2 :bar bar})

-- you can either import a single value
-- from a module or execute it
(import "module/location" mod)
(import "module/location")
(import 'path/to/file' [:foo :bar])
(import 'path/to/file' {:foo bar :baz quux})

-- events
(m:signal :channel "message")
(m:handle :channel (@ [message] (read message)))

-- error handling
(m:attempt :foozle-poozle
  (do
    (lots o stuff)
    (even more stuff)))

(m:handle :foozle-poozle
  (@ [err]
    (tryagain now)
    (right now)))

(destr &.props [:foo bar])
(destr &.props {:foo bar baz quux})


-- dosomething(1, 2)(3, 4)(5, 6)
(>>= dosomething [1 2] [3 4] [5 6])

---
