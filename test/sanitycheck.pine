# test creating a variable array doesn't accidentally make a function
# finish redoing docs site

# hows about a syntax highlighter
# new docs site
# SOURCEMAPS
# cleaner readme


(elem Title [attrs children]
  <div {:class attrs:class}>
    <span> attrs:text </span>
  </div>
)

<br/>

<Title {:class 'foo' :text 'bar'} />

foo:bar.baz.0.qux

foo:bar?.baz?.0.qux?

@foo

@.foo

@:foo

(make factorial [n]
  (if
    (lt n 2) 1
    (* n (factorial (- n 1)))))

(make factorial
  (of [1] 1)
  (of [n] (* n (factorial (- n 1)))))

(make apply [[head|tail]]
  (head.apply tail))

(make x 4)
(make y 6)

<div {:fart "shart"}></div>

{:foo (fn [] (bar baz))}

(make render [props]
  <div { :class "foo bar" }>
    "This is my new DOM element"
  </div>
)

# Will always export an object. Just a matter of
# how you want that object put together.
(export [foo/2 bar baz])
(export foo/2)
(export {:foo foo/2 :bar bar})

# you can either import a single value
# from a module or execute it
(import "module/location" mod)
(import "module/location")
(import 'path/to/file' [:foo :bar])
(import 'path/to/file' {:foo bar :baz quux})

# events
(signal :channel "message")
(handle :channel (fn [message] (read message)))

# error handling
(attempt :foozle-poozle
  (do
    (lots o stuff)
    (even more stuff)))

(handle :foozle-poozle
  (fn [err]
    (tryagain now)
    (right now)))

(destr @props [:foo bar])
(destr @props {:foo bar baz quux})

# async/await
# pass in an error channel and handle as necessary
(make foo (async :foozle-poozle []
  (await (something cool))
  (await (more cool stuff))
  (await (thats it))))

# promises and other chaining
(-> ($ "#dom")
    (@addClass "foo")
    (@addClass "bar"))

(-> (build promise)
    (@then (fn [] (get promise)))
    (@then (fn [] (get promise))))

# dosomething(1, 2)(3, 4)(5, 6)
(>>= dosomething [1 2] [3 4] [5 6])
